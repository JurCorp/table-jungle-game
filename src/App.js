// –ò–≥—Ä–∞: Jurassic Excel ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—é–∂–µ—Ç –∏ –º–µ—Ö–∞–Ω–∏–∫–∞
import React, { useState } from "react";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ —Å –µ–¥–∏–Ω—ã–º —Å—Ç–∏–ª–µ–º
const ChoiceButton = ({ onClick, children }) => (
  <button
    onClick={onClick}
    className="bg-yellow-400 hover:bg-yellow-500 text-black font-semibold py-2 px-4 rounded shadow mb-2 w-full"
  >
    {children}
  </button>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
const DialogBox = ({ character, mood, children }) => (
  <div className="p-4 border-l-4 bg-yellow-100 border-black text-left mb-4">
    <p className="text-sm italic font-semibold">{character} ({mood}) –≥–æ–≤–æ—Ä–∏—Ç:</p>
    <p className="mt-1">{children}</p>
  </div>
);

const App = () => {
  const [step, setStep] = useState("rewind");
  const [username, setUsername] = useState("");
  const [mood, setMood] = useState("good");
  const [questionIndex, setQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [selected, setSelected] = useState(null);
  const [ariResponse, setAriResponse] = useState("");
  const [reputation, setReputation] = useState(5);
  const [finalChoice, setFinalChoice] = useState(null);
  const [feedback, setFeedback] = useState("");
  const [mistakes, setMistakes] = useState([]); // –•—Ä–∞–Ω–∏–º –æ—à–∏–±–∫–∏
  const [ariImage, setAriImage] = useState(null);

  
  const questions = [
    {
      question: "–ö–∞–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —É —Ñ—É–Ω–∫—Ü–∏–∏ –°–£–ú–ú –≤ Excel?",
      options: ["=SUMM(A1:A5)", "=–°–£–ú–ú(A1:A5)", "=TOTAL(A1:A5)", "=–°–£–ú–ê(A1:A5)"],
      correct: "=–°–£–ú–ú(A1:A5)",
      topic: "–§–æ—Ä–º—É–ª—ã"
    },
    {
      question: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –°–†–ó–ù–ê–ß?",
      options: ["–°—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –∑–Ω–∞—á–µ–Ω–∏–π", "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–°—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ", "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —è—á–µ–π–∫–∏"],
      correct: "–°—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ",
      topic: "–§–æ—Ä–º—É–ª—ã"
    },
    {
      question: "–ö–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–µ—Ä–Ω—ë—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ?",
      options: ["=MIN(A1:A5)", "=–°–†–ó–ù–ê–ß(A1:A5)", "=MAX(A1:A5)", "=IF(A1>A2,A1,A2)"],
      correct: "=MAX(A1:A5)",
      topic: "–§–æ—Ä–º—É–ª—ã"
    },
    {
      question: "–ö–∞–∫ –∑–∞–¥–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π?",
      options: ["–§–æ—Ä–º–∞—Ç —è—á–µ–µ–∫ > –ß–∏—Å–ª–æ–≤–æ–π > –î–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π", "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É –û–ö–†–£–ì–õ", "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –≤—Ä—É—á–Ω—É—é", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å"],
      correct: "–§–æ—Ä–º–∞—Ç —è—á–µ–µ–∫ > –ß–∏—Å–ª–æ–≤–æ–π > –î–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π",
      topic: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    },
    {
      question: "–ß—Ç–æ –≤—ã–±—Ä–∞—Ç—å –≤–º–µ—Å—Ç–æ –í–ü–† –≤ Excel 365?",
      options: ["=XLOOKUP(...) / =–ü–†–û–°–ú–û–¢–†–•(...)", "=–ò–Ω–¥–µ–∫—Å + –ü–æ–∏—Å–∫", "=–ì–ü–†", "=–§–ò–õ–¨–¢–†"],
      correct: "=XLOOKUP(...) / =–ü–†–û–°–ú–û–¢–†–•(...)",
      topic: "–ü–æ–∏—Å–∫"
    },
  ];

  const ariPhrases = {
    good: {
      correct: [
        "–û—Ç–ª–∏—á–Ω–æ! –Ø –≤–∏–∂—É, —Ç—ã –Ω–µ –∑—Ä—è –æ–∫–æ–Ω—á–∏–ª –Æ—Ä—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –£ –Ω–∞—Å –ª—é–±—è—Ç –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥—É–º–∞—é—Ç.",
        "–ù–µ–ø–ª–æ—Ö–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è, –º–æ–ª–æ–¥–µ—Ü!"
      ],
      incorrect: [
        "–û—à–∏–±—Å—è, –±—ã–≤–∞–µ—Ç. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã!",
        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ. –ú—ã —É—á–∏–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö.",
        "–Ø —Ç–æ–∂–µ –Ω–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞ –ø–æ–Ω—è–ª Excel."
      ]
    },
    bad: {
      correct: [
        "–ù—É –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —á—Ç–æ-—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ.",
        "–¢—ã —ç—Ç–æ —Å–∞–º —Å–¥–µ–ª–∞–ª, –∏–ª–∏ –∫—Ç–æ-—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∞–ª?",
        "–°–ª—É—á–∞–π–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∂–∞–ª?"
      ],
      incorrect: [
        "–í–æ—Ç —Ç–∞–∫ –∏ –∑–Ω–∞–ª, —á—Ç–æ —Ç—ã –Ω–µ —Ç—è–Ω–µ—à—å.",
        "–≠—Ç–æ –¥–∞–∂–µ –Ω–µ —Å–º–µ—à–Ω–æ.",
        "–ö–∞–∫ —Ç—ã –≤–æ–æ–±—â–µ —Å—é–¥–∞ –ø–æ–ø–∞–ª?"
      ]
    }
  };

  const getAriResponse = (isCorrect) => {
  const phrases = ariPhrases[mood][isCorrect ? "correct" : "incorrect"];
  const text = phrases[Math.floor(Math.random() * phrases.length)];
  const image = `/ari_${mood}_${isCorrect ? "happy" : "sad"}.jpg`;
  return { text, image };
};

const ErrorStats = ({ mistakes }) => (
  <div className="mt-6">
    <h3 className="font-bold text-lg mb-2">–û—à–∏–±–∫–∏:</h3>
    {mistakes.length === 0 ? (
      <p>–¢—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏!</p>
    ) : (
      <ul className="list-disc ml-6">
        {mistakes.map((m, i) => (
          <li key={i}>
            <strong>{m.question}</strong><br />
            –¢–≤–æ–π –æ—Ç–≤–µ—Ç: <code>{m.userAnswer}</code><br />
            –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{m.correctAnswer}</code>
          </li>
        ))}
      </ul>
    )}
  </div>
);

  const handleAnswer = (opt) => {
  if (selected) return; // —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∫–ª–∏–∫–Ω—É—Ç—å –¥–≤–∞–∂–¥—ã
  setSelected(opt);

  const isCorrect = opt === questions[questionIndex].correct;
  if (isCorrect) {
    setScore(prev => prev + 1);
    setMood("good");
    setAriResponse("–•–º. –í–µ—Ä–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∏–º.");
    setAriImage("/ari_good_happy.jpg");
  } else {
    setMood("bad");
    setAriResponse("–ù–µ–≤–µ—Ä–Ω–æ... –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –Ω–µ –≤—Å—ë, –Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω.");
    setAriImage("/ari_good_sad.jpg");
  }

  // –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
  setTimeout(() => {
    if (questionIndex + 1 < questions.length) {
      setQuestionIndex(prev => prev + 1);
      setSelected(null);
      setAriResponse("");
      setAriImage(null);
    } else {
      setStep("quiz-end");
    }
  }, 2000);
};


  const [testPassed, setTestPassed] = useState(false); // –∏–ª–∏ true, –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const handleSendFeedback = async () => {
    const message = `ü¶ñ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç ${username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏–Ω–æ–∑–∞–≤—Ä"}:%0A${feedback}`;
    const chatId = "@your_channel_or_chat_id";
    const token = "123456:ABCDEF...";
    const url = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}&text=${message}`;
    try {
      await fetch(url);
      alert("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!");
      setFeedback("");
    } catch (err) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤");
    }
  };

  if (step === "rewind") {
    return (
      <div className="min-h-screen flex flex-col justify-center items-center px-4 py-6 text-center">
        <h1 className="text-2xl font-bold mb-4">–í—ã —Å–ø–∏—Ç–µ. –í–∞–º —Å–Ω–∏—Ç—Å—è —Å–æ–Ω, —á—Ç–æ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –Ω–µ –≤—ã–º–µ—Ä–ª–∏, –∞ –≤–ø–æ–ª–Ω–µ —Å–µ–±–µ –¥–æ–∂–∏–ª–∏ –¥–æ –Ω–∞—à–∏—Ö –¥–Ω–µ–π –∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∏‚Ä¶</h1>
        <img src="/meteor.jpg" alt="rewind" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <ChoiceButton onClick={() => setStep("wake")}>–ü—Ä–æ—Å–Ω—É—Ç—å—Å—è</ChoiceButton>
      </div>
    );
  }

if (step === "wake") {
  return (
    <div className="p-6 text-center flex flex-col items-center justify-center">
      <h2 className="text-xl font-bold mb-4">–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ —à–∫—É—Ä–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ö–∏—Ä–∏–ª–ª–∞. –ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç–µ?</h2>
      <img
        src="/room.jpg"
        alt="wake"
        className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded"
      />
      <ChoiceButton onClick={() => setStep("active-morning")}>
        –ü–æ–¥–Ω—è—Ç—å—Å—è —Å –∫—Ä–æ–≤–∞—Ç–∏
      </ChoiceButton>
      <ChoiceButton onClick={() => setStep("lazy-morning")}>
        –ü–æ–≤–∞–ª—è—Ç—å—Å—è –µ—â—ë
      </ChoiceButton>
    </div>
  );
}

  if (step === "lazy-morning") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–í—ã –ø—Ä–æ—Å–ø–∞–ª–∏! –ó–≤–æ–Ω–∏—Ç –∫–∞–¥—Ä–æ–≤–∏–∫...</h2>
        <img src="/hand.png" alt="–∑–≤–æ–Ω–æ–∫" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <p>¬´–ö–∏—Ä–∏–ª–ª, —É –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å!¬ª</p>
        <ChoiceButton onClick={() => setStep("dry-breakfast")}>–ë—ã—Å—Ç—Ä–æ —Å–æ–±—Ä–∞—Ç—å—Å—è</ChoiceButton>
      </div>
    );
  }

 if (step === "active-morning") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–ö–∏—Ä–∏–ª–ª –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª, –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è, —É–º—ã–ª—Å—è.</h2>
        <img src="/porridge.jpg" alt="–±—É—Ç–µ—Ä–±—Ä–æ–¥" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <ChoiceButton onClick={() => { setMood("good"); setStep("good-call") }}>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–æ—Å—å!</ChoiceButton>
      </div>
    );
  }
 if (step === "good-call") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–ó–≤–æ–Ω–æ–∫ –∏–∑ HR: ¬´–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å. –ñ–¥—ë–º!¬ª</h2>
        <img src="/hand.png" alt="–∑–≤–æ–Ω–æ–∫" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <p>¬´–°—É–ø–µ—Ä, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É!¬ª</p>
        <ChoiceButton onClick={() => { setMood("good"); setStep("grandma") }}>–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É</ChoiceButton>
      </div>
    );
  }

  if (step === "dry-breakfast") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–ó–∞–≤—Ç—Ä–∞–∫ –≤ —Å–ø–µ—à–∫–µ</h2>
        <img src="/bread.jpg" alt="–±—É—Ç–µ—Ä–±—Ä–æ–¥" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <p>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏—Å–ø–æ—Ä—Ç–∏–ª–æ—Å—å. –ö–∏—Ä–∏–ª–ª —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω.</p>
        <ChoiceButton onClick={() => { setMood("bad"); setStep("grandma") }}>–í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É</ChoiceButton>
      </div>
    );
  }

  

  if (step === "grandma") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–£ –ø–æ–¥—ä–µ–∑–¥–∞ –±–∞–±–∫–∞</h2>
        <img src="/babka1.jpg" alt="–±–∞–±–∫–∞" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <p>–û–Ω–∞ –º–∞—à–µ—Ç –ö–∏—Ä–∏–ª–ª—É –∏ —è–≤–Ω–æ —á—Ç–æ-—Ç–æ –æ—Ç –Ω–µ–≥–æ —Ö–æ—á–µ—Ç. –ö–∞–∫ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ?</p>
        <ChoiceButton onClick={() => { setReputation(r => r - 1); setStep("next") }}>–ù–∞—Ö–∞–º–∏—Ç—å</ChoiceButton>
        <ChoiceButton onClick={() => setStep("next")}>–ü–æ–∑–¥–∞—Ä–æ–≤–∞—Ç—å—Å—è</ChoiceButton>
      </div>
    );
  }


  if (step === "next") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–ö–∞–∫ –¥–æ–±–∏—Ä–∞—Ç—å—Å—è –¥–æ –æ—Ñ–∏—Å–∞?</h2>
        <img src="/pterotaxi.png" alt="—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <ChoiceButton onClick={() => setStep("city_fly")}>–í–∑—è—Ç—å —Ç–∞–∫—Å–∏—Ä–æ–¥–∞–∫—Ç–∏–ª—å</ChoiceButton>
        <ChoiceButton onClick={() => {
          const late = Math.random() < 0.3;
          if (late) setMood("bad");
          setStep("city_earth");
        }}>–°–µ—Å—Ç—å –Ω–∞ –¥–∏–Ω–æ–¥–æ–±—É—Å</ChoiceButton>
      </div>
    );
  }

  if (step === "city_fly") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–í—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—Ç–µ—Å—å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –ø—Ä–∏–±—ã–≤–∞–µ—Ç–µ –≤–æ–≤—Ä–µ–º—è</h2>
        <img src="/city2.jpg" alt="–≥–æ—Ä–æ–¥" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <ChoiceButton onClick={() => setStep("building")}>–ü–æ–¥—ä–µ–∑–∂–∞–µ—Ç –∑–¥–∞–Ω–∏–µ Jurassic Corp</ChoiceButton>
      </div>
    );
  }

  if (step === "city_earth") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–í—ã –≤–∏–¥–∏—Ç–µ –≤–¥–∞–ª–µ–∫–µ Jurassic corp, –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ, —á—Ç–æ –º–æ–∂–µ—Ç–µ –æ–ø–æ–∑–¥–∞—Ç—å </h2>
        <img src="/city down.jpg" alt="–≥–æ—Ä–æ–¥" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <ChoiceButton onClick={() => setStep("building")}>–ü–æ–¥—ä–µ–∑–∂–∞–µ—Ç –∑–¥–∞–Ω–∏–µ Jurassic Corp</ChoiceButton>
      </div>
    );
  }

  if (step === "building") {
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–û—Ñ–∏—Å Jurassic Corp</h2>
        <img src="/jurassic corp.jpg" alt="–æ—Ñ–∏—Å" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <ChoiceButton onClick={() => setStep("reception_start")}>–ó–∞–π—Ç–∏ –≤ –∑–¥–∞–Ω–∏–µ</ChoiceButton>
      </div>
    );
  }

  if (step === "reception_start") {
    const appearanceOk = mood === "good" && reputation >= 5;
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–†–µ—Å–µ–ø—à–µ–Ω Jurassic Corp</h2>
        <img src="/reception.jpg" alt="—Ä–µ—Å–µ–ø—à–µ–Ω" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <p>–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ê—Ä–∏—Å—Ç–∞—Ä—Ö.</p>
        <ChoiceButton
          onClick={() => setStep("intro")}>–ñ–¥–∞—Ç—å...</ChoiceButton>
      </div>
    );
  }
  if (step === "intro") {
    const appearanceOk = mood === "good" && reputation >= 5;
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ê—Ä–∏—Å—Ç–∞—Ä—Ö.</h2>
        <img src="/intro.jpg" alt="—Ä–µ—Å–µ–ø—à–µ–Ω" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <p>–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ê—Ä–∏—Å—Ç–∞—Ä—Ö.</p>
        <ChoiceButton
          onClick={() => {
            if (!appearanceOk) {
              setMood("bad");
            }
            setStep("hall-talk");
          }}
        >–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –ê—Ä–∏—Å—Ç–∞—Ä—Ö–æ–º</ChoiceButton>
      </div>
    );
  }

  if (step === "hall-talk") {
    const friendly = mood === "good" && reputation >= 5;
    return (
      <div className="p-6 text-center">
        <h2 className="text-xl font-bold mb-4">–ö–æ—Ä–∏–¥–æ—Ä –æ—Ñ–∏—Å–∞</h2>
        <img src="/hall.png" alt="–∫–æ—Ä–∏–¥–æ—Ä" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
        <DialogBox character="–ê—Ä–∏—Å—Ç–∞—Ä—Ö" mood={mood}>
          {friendly ? "–î–æ–ª–≥–æ –¥–æ –Ω–∞—Å –¥–æ–±–∏—Ä–∞–ª–∏—Å—å? ." : "–Æ—Ä—Å–∫–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–∏? –ù—É –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≤—ã —Ç–∞–º –∑–Ω–∞–µ—Ç–µ..."}
        </DialogBox>
        <ChoiceButton onClick={() => setStep("quiz")}>–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</ChoiceButton>
      </div>
    );
  }

  if (step === "quiz") {
    const q = questions[questionIndex];
    return (
      <div className="p-6 max-w-xl mx-auto">
        <div className="text-sm text-gray-600 mb-2">–ê—Ä–∏—Å—Ç–∞—Ä—Ö ({mood === "good" ? "—Å–ø–æ–∫–æ–µ–Ω" : "—É–≥—Ä—é–º"})</div>
        <h2 className="text-xl font-bold mb-2">–í–æ–ø—Ä–æ—Å {questionIndex + 1} –∏–∑ {questions.length}</h2>
        <p className="mb-4">{q.question}</p>
        <div className="space-y-2">
          {q.options.map((opt, i) => (
            <button
              key={i}
              onClick={() => handleAnswer(opt)}
              disabled={selected}
              className={`w-full p-2 rounded ${
                selected === opt
                  ? opt === q.correct
                    ? "bg-green-300"
                    : "bg-red-300"
                  : "bg-yellow-300 hover:bg-yellow-400"
              }`}
            >
              {opt}
            </button>
          ))}
        </div>
        {ariResponse && ariImage && (
  <div className="mt-4 flex items-start gap-4">
    <img src={ariImage} alt="–ê—Ä–∏—Å—Ç–∞—Ä—Ö" className="w-24 h-24 object-contain" />
    <div className="p-3 border-l-4 border-black bg-yellow-100 italic flex-1">
      <strong>–ê—Ä–∏—Å—Ç–∞—Ä—Ö:</strong> {ariResponse}
    </div>
  </div>
)}
      
      </div>
    );
  }

 
if (step === "quiz-end") {
  return (
    <div className="p-6 text-center space-y-4">
      <h1 className="text-2xl text-black font-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</h1>
      <p className="text-lg text-black">
        –¢—ã –Ω–∞–±—Ä–∞–ª <strong>{score}</strong> –∏–∑ {questions.length} –±–∞–ª–ª–æ–≤!
      </p>
      <p className="italic text-black">–ú—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º‚Ä¶ –≤–æ–∑–º–æ–∂–Ω–æ.</p>
   <img src="/hall.png" alt="–∫–æ—Ä–∏–¥–æ—Ä" className="w-full max-w-md max-h-[40vh] object-contain mb-4 rounded" />
    </div>
  );
}

}

export default App;
